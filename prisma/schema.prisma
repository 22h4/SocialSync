generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  socialSettings SocialSettings?
  scheduledPosts ScheduledPost[]
  settings      UserSettings?
  integrations  SocialIntegration[]
  posts         Post[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  hashtags    String[]
  videoUrl    String
  platform    String
  status      String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  darkMode      Boolean  @default(false)
  notifications Boolean  @default(true)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialIntegration {
  id          String   @id @default(cuid())
  userId      String
  platform    String
  apiKey      String
  apiSecret   String
  accessToken String?
  isConnected Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model SocialSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramAccessToken    String?  @db.Text
  instagramRefreshToken   String?  @db.Text
  instagramTokenExpiry    DateTime?
  twitterAccessToken      String?  @db.Text
  twitterRefreshToken     String?  @db.Text
  twitterTokenExpiry      DateTime?
  autoPostToInstagram     Boolean  @default(false)
  autoPostToTwitter       Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model ScheduledPost {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String   @db.Text
  mediaUrl    String?  @db.Text
  platforms   String[]
  scheduledFor DateTime
  status      String   @default("pending")
  postedAt    DateTime?
  error       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 